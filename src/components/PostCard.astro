---
interface Props {
  url: string;
  title: string;
  image: {
    src: string;
    alt: string;
  };
  description: string;
  authorImage: string;
  author: string;
  tag: string;
  iconTag: string;
}

const { url, title, image, description, authorImage, author, tag, iconTag } =
  Astro.props;
---

<li class="">
  <a href={url} class="block group">
    
      <div class="w-full overflow-hidden h-[300px]">
        <img
          class="w-full h-full object-cover group-hover:scale-110 duration-[0.3s]"
          src={image.src}
          alt={image.alt}
        />
      </div>
      <div class="flex justify-between px-4 py-3 h-[50px]">
        <img src={iconTag} alt="" />
        <span class="uppercase">{tag}</span>
      </div>
      <div class="px-4 py-3 h-[150px]">
        <h3 class="font-bold text-lg">{title}</h3>
        <p
          class="text-nowrap overflow-hidden text-ellipsis max-w-[600px]"
          id="description">
          {description}
        </p>
      </div>
      <div class="flex gap-x-4 px-4 py-3 items-center h-[50px]">
        <figure class="size-8 rounded-full overflow-hidden">
          <img
            class="w-full h-full object-cover"
            src={authorImage}
            alt={author}
          />
        </figure>
        <span class="capitalize font-semibold">{author}</span>
      </div>
    
  </a>
</li>


<script>
  document.addEventListener("DOMContentLoaded", () => {
    const descriptions: NodeListOf<Element> =
      document.querySelectorAll("#description");
    descriptions.forEach((description) => {
      let text: string = description.textContent ?? "";
      if (text.length > 120) {
        description.textContent = `${text.slice(0, 120)} ...`;
      }
    });
  });
</script>
